name: Deploy PWA to pay.texa.ng

on:
  push:
    branches: [ main, master ]
    paths:
      - 'pwa/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      VPS_APP_DIR: ${{ secrets.VPS_APP_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set release name
        run: echo "REL=pwa-$(date +'%Y-%m-%d-%H%M%S')" >> $GITHUB_ENV

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts

      - name: Rsync PWA source to server release directory
        run: |
          rsync -az --delete \
            --exclude='.next' \
            --exclude='node_modules' \
            pwa/ "${VPS_USER}@${VPS_HOST}:${VPS_APP_DIR}/releases/${REL}/"

      - name: Remote build, switch symlink, and reload PM2/Nginx
        run: |
          ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=10 "${VPS_USER}@${VPS_HOST}" 'bash -s' <<EOF
          set -euo pipefail
          APP_DIR="${VPS_APP_DIR}"
          REL_NAME="${REL}"
          REL="$APP_DIR/releases/$REL_NAME"
          echo "Using release: $REL"

          # Diagnostics
          echo "APP_DIR=">$APP_DIR || true
          [ -z "$APP_DIR" ] && { echo "ERROR: APP_DIR empty. Set VPS_APP_DIR secret"; exit 1; }
          mkdir -p "$APP_DIR/shared" || true
          echo "--- ls $APP_DIR ---"; ls -la "$APP_DIR" || true
          echo "--- ls $APP_DIR/shared ---"; ls -la "$APP_DIR/shared" || true

          # Ensure shared env exists
          if [ ! -f "$APP_DIR/shared/.env.production" ]; then
            echo "Missing $APP_DIR/shared/.env.production"; exit 1; fi

          # Link env into release
          ln -sfn "$APP_DIR/shared/.env.production" "$REL/.env.production"

          # Ensure Node and PM2
          if ! command -v node >/dev/null 2>&1; then
            echo "Node.js is not installed. Install Node 18+/20+"; exit 1
          fi
          command -v pm2 >/dev/null 2>&1 || npm i -g pm2

          export CI=true
          export NODE_OPTIONS="--max_old_space_size=512"
          npm config set production false --location=project || true

          cd "$REL"
          NPM_CONFIG_PRODUCTION=false npm ci --no-audit --no-fund --prefer-offline \
            || NPM_CONFIG_PRODUCTION=false npm install --no-audit --no-fund
          if ! node -e "require.resolve('typescript')" >/dev/null 2>&1; then
            npm i -D typescript @types/node @types/react @types/react-dom --no-audit --no-fund
          fi
          node -v; npm -v; npm ls typescript || true
          NEXT_TELEMETRY_DISABLED=1 npm run build

          # Switch current symlink used by Nginx
          ln -sfn "$REL" "$APP_DIR/current"

          # PM2: stop existing and free port 3005
          pm2 delete texa-pwa 2>/dev/null || true
          if command -v lsof >/dev/null 2>&1; then
            PIDS=$(lsof -t -i:3005 || true); [ -n "$PIDS" ] && kill -9 $PIDS || true
          else
            PIDS=$(ss -ltnp | awk '/:3005 /{print $NF}' | sed 's/.*pid=\([0-9]*\).*/\1/' | sort -u || true)
            [ -n "$PIDS" ] && kill -9 $PIDS || true
          fi

          # Start as current dir (owned by site user)
          cd "$APP_DIR/current"
          NODE_ENV=production PORT=3005 HOST=127.0.0.1 pm2 start npm --name texa-pwa -- run start -- -p 3005
          pm2 save || true

          # Verify app responds locally before reloading Nginx
          sleep 3
          if ! curl -fsS http://127.0.0.1:3005/ >/dev/null; then
            echo "Local 3005 not responding"; pm2 logs texa-pwa --lines 200 || true; exit 1
          fi

          # Reload Nginx
          nginx -t && systemctl reload nginx || true
          echo "Deploy complete: $REL_NAME"
          exit 0
          EOF
