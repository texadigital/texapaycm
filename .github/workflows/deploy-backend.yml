name: Deploy Backend (Laravel) to api.pay.texa.ng

on:
  push:
    branches: [ main, master ]
    paths:
      - '!pwa/**'
      - '**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-backend
      cancel-in-progress: true
    env:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      BACKEND_APP_DIR: ${{ secrets.BACKEND_APP_DIR }}
      SITE_USER: ${{ secrets.BACKEND_SITE_USER }}
      BACKEND_HEALTHCHECK_URL: ${{ secrets.BACKEND_HEALTHCHECK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set release name
        run: echo "REL=laravel-$(date +'%Y-%m-%d-%H%M%S')" >> $GITHUB_ENV

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts

      - name: Rsync Laravel source to server release directory
        run: |
          rsync -az --delete \
            --exclude='pwa' \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='TEXA (3)' \
            --exclude='storage/logs' \
            ./ "${VPS_USER}@${VPS_HOST}:${BACKEND_APP_DIR}/releases/${REL}/"

      - name: Remote build, link, and reload PHP-FPM/Nginx
        run: |
          set -e
          ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=10 "${VPS_USER}@${VPS_HOST}" \
            BACKEND_APP_DIR="${BACKEND_APP_DIR}" \
            SITE_USER="${SITE_USER}" \
            REL="${REL}" \
            BACKEND_HEALTHCHECK_URL="${BACKEND_HEALTHCHECK_URL}" \
            bash -lc '
            set -e
            APP_DIR="$BACKEND_APP_DIR"
            REL_NAME="$REL"
            REL="$APP_DIR/releases/$REL_NAME"
            echo "Using release: $REL"

            # Ensure shared structure and env
            mkdir -p "$APP_DIR/shared"
            mkdir -p "$APP_DIR/shared/storage" \
                     "$APP_DIR/shared/storage/app" \
                     "$APP_DIR/shared/storage/framework" \
                     "$APP_DIR/shared/storage/framework/cache" \
                     "$APP_DIR/shared/storage/framework/data" \
                     "$APP_DIR/shared/storage/framework/sessions" \
                     "$APP_DIR/shared/storage/framework/testing" \
                     "$APP_DIR/shared/storage/framework/views" \
                     "$APP_DIR/shared/storage/logs"
            mkdir -p "$APP_DIR/shared/bootstrap/cache"
            if [ ! -f "$APP_DIR/shared/.env" ]; then
              echo "Missing $APP_DIR/shared/.env"; exit 1; fi

            # Link shared items into release
            ln -sfn "$APP_DIR/shared/.env" "$REL/.env"
            rm -rf "$REL/storage" && ln -sfn "$APP_DIR/shared/storage" "$REL/storage"
            rm -rf "$REL/bootstrap/cache" && ln -sfn "$APP_DIR/shared/bootstrap/cache" "$REL/bootstrap/cache"

            # Ensure release ownership (so horizon systemd user can read/execute)
            chown -R "$SITE_USER:$SITE_USER" "$REL" || true

            cd "$REL"
            # Install PHP deps (no-dev) and optimize
            if command -v composer >/dev/null 2>&1; then COMPOSER_BIN=composer; else COMPOSER_BIN=/usr/local/bin/composer; fi
            export COMPOSER_ALLOW_SUPERUSER=1
            export COMPOSER_MEMORY_LIMIT=-1
            "$COMPOSER_BIN" install --no-dev --optimize-autoloader --no-interaction --prefer-dist --no-ansi --no-progress

            # Put app in maintenance for safe DB migrations (default maintenance page)
            php artisan down || true

            php artisan storage:link --force || true

            # Ensure we read fresh .env (avoid stale cached config)
            php artisan config:clear || true

            # Ensure sessions migration exists (idempotent)
            if ! ls database/migrations/*create_sessions_table*.php >/dev/null 2>&1; then
              echo "Generating sessions table migration"
              php artisan session:table || true
            fi

            # Run migrations
            php artisan migrate --force

            # Restart workers to pick new code and ensure they are running
            # Prefer Horizon if available; otherwise use Supervisor. Idempotent where possible.
            if php artisan list --raw | grep -q '^horizon:'; then
              php artisan horizon:terminate || true
              # If Horizon not running, start it in background so SSH doesn't hang
              if ! php artisan horizon:status >/dev/null 2>&1; then
                nohup php artisan horizon >/dev/null 2>&1 &
                sleep 2
                php artisan horizon:status || true
              fi
            else
              # Supervisor flow: reread config, update, and start workers
              systemctl reload supervisor || true
              supervisorctl reread || true
              supervisorctl update || true
              supervisorctl start laravel-worker:* || true
            fi
            
            # Politely ask queue workers to restart after code changes
            php artisan queue:restart || true
            echo "Deploy finished ok at $(date)"

            # Rebuild caches after code changes
            php artisan config:cache || true
            php artisan route:cache || true
            php artisan view:cache || true

            # Bring app back up
            php artisan up || true

            # Atomic switch: update current symlink
            ln -sfn "$REL" "$APP_DIR/current"
            # Ensure public points at current/public so no vhost edit is needed
            ln -sfn "$APP_DIR/current/public" "$APP_DIR/public"

            # Ensure symlinks and app dir are owned by site user
            chown -h "$SITE_USER:$SITE_USER" "$APP_DIR/current" "$APP_DIR/public" || true
            chown -R "$SITE_USER:$SITE_USER" "$APP_DIR" || true

            # Extra safety: clear config cache on the active release after switching symlink
            # so any shared .env changes are immediately reflected on the active app
            cd "$APP_DIR/current" && php artisan config:clear || true

            # Reload PHP-FPM 8.4 and Nginx (adjust service name if different)
            systemctl reload php8.4-fpm || systemctl reload php8.3-fpm || true
            nginx -t && systemctl reload nginx || true

            # Sanity checks for SMTP and Twilio (warn-only)
            echo "--- Sanity: SMTP/Twilio envs ---"
            if [ -f "$APP_DIR/shared/.env" ]; then
              if ! grep -qE '^MAIL_HOST=' "$APP_DIR/shared/.env" || ! grep -qE '^MAIL_USERNAME=' "$APP_DIR/shared/.env"; then
                echo "[WARN] MAIL_* not fully configured in shared .env (password reset emails may be skipped)";
              fi
              if ! grep -qE '^TWILIO_SID=' "$APP_DIR/shared/.env" || ! grep -qE '^TWILIO_AUTH_TOKEN=' "$APP_DIR/shared/.env" || ! grep -qE '^TWILIO_PHONE_NUMBER=' "$APP_DIR/shared/.env"; then
                echo "[WARN] Twilio envs not set; SMS OTP will fallback to logs";
              fi
            fi

            # Optional healthcheck
            if [ -n "${BACKEND_HEALTHCHECK_URL}" ]; then
              echo "Running healthcheck: ${BACKEND_HEALTHCHECK_URL}"
              if ! curl -fsS --max-time 10 "${BACKEND_HEALTHCHECK_URL}" >/dev/null; then
                echo "Healthcheck failed"
                exit 1
              fi
            fi

            # Post-deploy diagnostics (safe): verify symlinks and tail error logs
            echo "public ->"; ls -l "$APP_DIR/public" || true
            echo "index.php in current/public ->"; ls -l "$APP_DIR/current/public/index.php" || true
            echo "--- Nginx error log (tail 200) ---"; tail -n 200 /var/log/nginx/error.log 2>/dev/null || true
            if [ -d "/home/$SITE_USER/logs" ]; then
              echo "--- Site logs directory listing ---"; ls -l "/home/$SITE_USER/logs" || true
              for f in /home/$SITE_USER/logs/*error*.log; do
                echo "== $f =="; tail -n 50 "$f"; done 2>/dev/null || true
            fi

            echo "Backend deploy complete: $REL_NAME"

            # Optional: keep only the 5 newest releases to save disk
            cd "$APP_DIR/releases" && ls -1t | tail -n +6 | xargs -r -I {} rm -rf {}
          ' || ec=$?
          if [ "${ec:-0}" -eq 255 ]; then
            echo "Ignoring SSH exit 255 (broken pipe) after remote completion";
            exit 0;
          elif [ -n "${ec:-}" ] && [ "$ec" -ne 0 ]; then
            exit "$ec";
          fi
